Alex Schultz
tarantula.out
CS362, Spring 2016
6 June 2016

+Passed Unit test 1
make: `unittest1' is up to date.
rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o unittest1 unittest1.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./unittest1 >> unittest1.out
File 'dominion.c'
Lines executed:19.65% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o unittest2 unittest2.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./unittest2 >> unittest2.out
File 'dominion.c'
Lines executed:16.67% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o unittest3 unittest3.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./unittest3 >> unittest3.out
File 'dominion.c'
Lines executed:16.67% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o unittest4 unittest4.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./unittest4 >> unittest4.out
File 'dominion.c'
Lines executed:1.05% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o cardtest1 cardtest1.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./cardtest1 >> cardtest1.out
File 'dominion.c'
Lines executed:22.11% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o cardtest2 cardtest2.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./cardtest2 >> cardtest2.out
File 'dominion.c'
Lines executed:22.11% of 570
Creating 'dominion.c.gcov'

rm -f *.o playdom.exe playdom unittest1.out unittest2.out unittest3.out unittest4.out cardtest1.out cardtest2.out cardtest3.out test.exe test player unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4 randomtest1 randomtest2 randomtestadventurer ramdomtestplayer.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so *.a *.dSYM
gcc -c rngs.c -g  -Wall -fpic -coverage -lm
gcc -c dominion.c -g  -Wall -fpic -coverage -lm
gcc -o cardtest3 cardtest3.c -g dominion.o rngs.o -Wall -fpic -coverage -lm
./cardtest3 >> cardtest3.out
File 'dominion.c'
Lines executed:20.88% of 570
Creating 'dominion.c.gcov'

   1:#include "dominion.h"
   2:#include "dominion_helpers.h"
   3:#include "rngs.h"
   4:#include <stdio.h>
   5:#include <math.h>
   6:#include <stdlib.h>
   7:
[93m   8:int compare(const void* a, const void* b) {
[0m
[93m   9:  if (*(int*)a > *(int*)b)
[0m
[92m  10:    return 1;
[0m
[93m  11:  if (*(int*)a < *(int*)b)
[0m
[93m  12:    return -1;
[0m
[93m  13:  return 0;
[0m
  14:}
  15:
  16:struct gameState* newGame() {
  17:  struct gameState* g = malloc(sizeof(struct gameState));
  18:  return g;
  19:}
  20:
  21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
  22:		  int k8, int k9, int k10) {
  23:  int* k = malloc(10 * sizeof(int));
  24:  k[0] = k1;
  25:  k[1] = k2;
  26:  k[2] = k3;
  27:  k[3] = k4;
  28:  k[4] = k5;
  29:  k[5] = k6;
  30:  k[6] = k7;
  31:  k[7] = k8;
  32:  k[8] = k9;
  33:  k[9] = k10;
  34:  return k;
  35:}
  36:
  37:int remodelF(int choice2, int choice1, int handPos, int currentPlayer, struct gameState *state){
  38:	int j;
  39:	int i;
  40:	j = state->hand[currentPlayer][choice1];  //store card we will trash
  41:
  42:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
  43:	{
  44:	  return -1;
  45:	}
  46:
  47:      gainCard(choice2, state, 0, currentPlayer);
  48:
  49:      //discard card from hand
  50:      discardCard(handPos, currentPlayer, state, 0);
  51:
  52:      //discard trashed card
  53:      for (i = 0; i < state->handCount[currentPlayer]; i++)
  54:	{
  55:	  if (state->hand[currentPlayer][i] == j)
  56:	    {
  57:	      discardCard(i, currentPlayer, state, 0);
  58:	      break;
  59:	    }
  60:	}
  61:	return 0;
  62:}
  63:
  64:void cutpurseF(int currentPlayer, int handPos, struct gameState* state){
  65:	  updateCoins(currentPlayer, state, 2);
  66:	  int i;
  67:	  int j;
  68:	  int k;
  69:	  for (i = 0; i < state->numPlayers; i++)
  70:	{
  71:	  if (i != currentPlayer)
  72:		{
  73:		  for (j = 0; j < state->handCount[i]; j++)
  74:		{
  75:		  if (state->hand[i][j] == copper)
  76:			{
  77:			  discardCard(j, i, state, 0);
  78:			  break;
  79:			}
  80:		  if (j == state->handCount[i])
  81:			{
  82:			  for (k = 0; k < state->handCount[i]; k++)
  83:			{
  84:			  if (DEBUG)
  85:				printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
  86:			}
  87:			  break;
  88:			}
  89:		}
  90:
  91:		}
  92:
  93:	}
  94:
  95:      //discard played card from hand
  96:      discardCard(handPos, currentPlayer, state, 0);
  97:}
[91m  98:void adventurerF(struct gameState* state,int currentPlayer, int handPos, int drawntreasure){
[0m
  99:	int temphand[MAX_HAND];
[91m 100:	int z = 0;
[0m
 101:	int cardDrawn;
[91m 102:	while(drawntreasure<2){
[0m
[91m 103:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
[0m
[91m 104:	  shuffle(currentPlayer, state);
[0m
 105:	}
[91m 106:	drawCard(currentPlayer, state);
[0m
[91m 107:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
[0m
[91m 108:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
[0m
[91m 109:	  drawntreasure++;
[0m
 110:	else{
[91m 111:	  temphand[z]=cardDrawn;
[0m
[91m 112:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
[0m
[91m 113:	  z++;
[0m
 114:	}
 115:      }
[91m 116:      while(z-1>=0){
[0m
[91m 117:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
[0m
[91m 118:	z=z-1;
[0m
 119:      }
[91m 120:}
[0m
 121:
 122:void sea_hagF(struct gameState* state,int currentPlayer){
 123:	int i;
 124:    for (i = 0; i < state->numPlayers; i++){
 125:		if (i != currentPlayer){
 126:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
 127:		  state->deckCount[i]--;
 128:		  state->discardCount[i]++;
 129:		  state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
 130:		}
 131:    }
 132:}
 133:
[91m 134:void council_roomF(struct gameState* state,int currentPlayer,int handPos){
[0m
 135:      int i;
[91m 136:	  for (i = 0; i < 4; i++)
[0m
 137:	{
[91m 138:	  drawCard(currentPlayer, state);
[0m
 139:	}
 140:      //+1 Buy
[91m 141:      state->numBuys++;
[0m
 142:
 143:      //Each other player draws a card
[91m 144:      for (i = 0; i < state->numPlayers; i++)
[0m
 145:	{
[91m 146:	  if ( i != currentPlayer )
[0m
 147:	    {
[91m 148:	      drawCard(i, state);
[0m
 149:	    }
 150:	}
 151:
 152:      //put played card in played card pile
[91m 153:      discardCard(handPos, currentPlayer, state, 0);
[0m
 154:
[91m 155:}
[0m
 156:
 157:void outpostF(struct gameState* state,int handPos,int currentPlayer){
 158:      //set outpost flag
 159:      state->outpostPlayed++;
 160:
 161:      //discard card
 162:      discardCard(handPos, currentPlayer, state, 0);
 163:}
 164:
[91m 165:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
[0m
 166:		   struct gameState *state) {
 167:
 168:  int i;
 169:  int j;
 170:  int it;
 171:  //set up random number generator
[91m 172:  SelectStream(1);
[0m
[91m 173:  PutSeed((long)randomSeed);
[0m
 174:
 175:  //check number of players
[91m 176:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
[0m
 177:    {
 178:      return -1;
 179:    }
 180:
 181:  //set number of players
[91m 182:  state->numPlayers = numPlayers;
[0m
 183:
 184:  //check selected kingdom cards are different
[91m 185:  for (i = 0; i < 10; i++)
[0m
 186:    {
[91m 187:      for (j = 0; j < 10; j++)
[0m
 188:        {
[91m 189:	  if (j != i && kingdomCards[j] == kingdomCards[i])
[0m
 190:	    {
 191:	      return -1;
 192:	    }
 193:        }
 194:    }
 195:
 196:
 197:  //initialize supply
 198:  ///////////////////////////////
 199:
 200:  //set number of Curse cards
[91m 201:  if (numPlayers == 2)
[0m
 202:    {
[91m 203:      state->supplyCount[curse] = 10;
[0m
 204:    }
 205:  else if (numPlayers == 3)
 206:    {
 207:      state->supplyCount[curse] = 20;
 208:    }
 209:  else
 210:    {
 211:      state->supplyCount[curse] = 30;
 212:    }
 213:
 214:  //set number of Victory cards
[91m 215:  if (numPlayers == 2)
[0m
 216:    {
[91m 217:      state->supplyCount[estate] = 8;
[0m
[91m 218:      state->supplyCount[duchy] = 8;
[0m
[91m 219:      state->supplyCount[province] = 8;
[0m
 220:    }
 221:  else
 222:    {
 223:      state->supplyCount[estate] = 12;
 224:      state->supplyCount[duchy] = 12;
 225:      state->supplyCount[province] = 12;
 226:    }
 227:
 228:  //set number of Treasure cards
[91m 229:  state->supplyCount[copper] = 60 - (7 * numPlayers);
[0m
[91m 230:  state->supplyCount[silver] = 40;
[0m
[91m 231:  state->supplyCount[gold] = 30;
[0m
 232:
 233:  //set number of Kingdom cards
[91m 234:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
[0m
 235:    {
[91m 236:      for (j = 0; j < 10; j++)           		//loop chosen cards
[0m
 237:	{
[91m 238:	  if (kingdomCards[j] == i)
[0m
 239:	    {
 240:	      //check if card is a 'Victory' Kingdom card
[91m 241:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
[0m
 242:		{
[91m 243:		  if (numPlayers == 2){
[0m
[91m 244:		    state->supplyCount[i] = 8;
[0m
 245:		  }
 246:		  else{ state->supplyCount[i] = 12; }
 247:		}
 248:	      else
 249:		{
[91m 250:		  state->supplyCount[i] = 10;
[0m
 251:		}
[91m 252:	      break;
[0m
 253:	    }
 254:	  else    //card is not in the set choosen for the game
 255:	    {
[91m 256:	      state->supplyCount[i] = -1;
[0m
 257:	    }
 258:	}
 259:
 260:    }
 261:
 262:  ////////////////////////
 263:  //supply intilization complete
 264:
 265:  //set player decks
[91m 266:  for (i = 0; i < numPlayers; i++)
[0m
 267:    {
[91m 268:      state->deckCount[i] = 0;
[0m
[91m 269:      for (j = 0; j < 3; j++)
[0m
 270:	{
[91m 271:	  state->deck[i][j] = estate;
[0m
[91m 272:	  state->deckCount[i]++;
[0m
 273:	}
[91m 274:      for (j = 3; j < 10; j++)
[0m
 275:	{
[91m 276:	  state->deck[i][j] = copper;
[0m
[91m 277:	  state->deckCount[i]++;
[0m
 278:	}
 279:    }
 280:
 281:  //shuffle player decks
[91m 282:  for (i = 0; i < numPlayers; i++)
[0m
 283:    {
[91m 284:      if ( shuffle(i, state) < 0 )
[0m
 285:	{
 286:	  return -1;
 287:	}
 288:    }
 289:
 290:  //draw player hands
[91m 291:  for (i = 0; i < numPlayers; i++)
[0m
 292:    {
 293:      //initialize hand size to zero
[91m 294:      state->handCount[i] = 0;
[0m
[91m 295:      state->discardCount[i] = 0;
[0m
 296:      //draw 5 cards
[91m 297:      for (j = 0; j < 5; j++)
[0m
 298:      	{
[91m 299:      	  drawCard(i, state);
[0m
 300:      	}
 301:    }
 302:
 303:  //set embargo tokens to 0 for all supply piles
[91m 304:  for (i = 0; i <= treasure_map; i++)
[0m
 305:    {
[91m 306:      state->embargoTokens[i] = 0;
[0m
 307:    }
 308:
 309:  //initialize first player's turn
[91m 310:  state->outpostPlayed = 0;
[0m
[91m 311:  state->phase = 0;
[0m
[91m 312:  state->numActions = 1;
[0m
[91m 313:  state->numBuys = 1;
[0m
[91m 314:  state->playedCardCount = 0;
[0m
[91m 315:  state->whoseTurn = 0;
[0m
[91m 316:  state->handCount[state->whoseTurn] = 0;
[0m
 317:  //int it; move to top
 318:
 319:  //Moved draw cards to here, only drawing at the start of a turn
[91m 320:  for (it = 0; it < 5; it++){
[0m
[91m 321:    drawCard(state->whoseTurn, state);
[0m
 322:  }
 323:
[91m 324:  updateCoins(state->whoseTurn, state, 0);
[0m
 325:
[91m 326:  return 0;
[0m
 327:}
 328:
[91m 329:int shuffle(int player, struct gameState *state) {
[0m
 330:
 331:
 332:  int newDeck[MAX_DECK];
[91m 333:  int newDeckPos = 0;
[0m
 334:  int card;
 335:  int i;
 336:
[91m 337:  if (state->deckCount[player] < 1)
[0m
[91m 338:    return -1;
[0m
[91m 339:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
[0m
 340:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
 341:
[91m 342:  while (state->deckCount[player] > 0) {
[0m
[91m 343:    card = floor(Random() * state->deckCount[player]);
[0m
[91m 344:    newDeck[newDeckPos] = state->deck[player][card];
[0m
[91m 345:    newDeckPos++;
[0m
[91m 346:    for (i = card; i < state->deckCount[player]-1; i++) {
[0m
[91m 347:      state->deck[player][i] = state->deck[player][i+1];
[0m
 348:    }
[91m 349:    state->deckCount[player]--;
[0m
 350:  }
[91m 351:  for (i = 0; i < newDeckPos; i++) {
[0m
[91m 352:    state->deck[player][i] = newDeck[i];
[0m
[91m 353:    state->deckCount[player]++;
[0m
 354:  }
 355:
[91m 356:  return 0;
[0m
 357:}
 358:
 359:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
 360:{
 361:  int card;
 362:  int coin_bonus = 0; 		//tracks coins gain from actions
 363:
 364:  //check if it is the right phase
 365:  if (state->phase != 0)
 366:    {
 367:      return -1;
 368:    }
 369:
 370:  //check if player has enough actions
 371:  if ( state->numActions < 1 )
 372:    {
 373:      return -1;
 374:    }
 375:
 376:  //get card played
 377:  card = handCard(handPos, state);
 378:
 379:  //check if selected card is an action
 380:  if ( card < adventurer || card > treasure_map )
 381:    {
 382:      return -1;
 383:    }
 384:
 385:  //play card
 386:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
 387:    {
 388:      return -1;
 389:    }
 390:
 391:  //reduce number of actions
 392:  state->numActions--;
 393:
 394:  //update coins (Treasure cards may be added with card draws)
 395:  updateCoins(state->whoseTurn, state, coin_bonus);
 396:
 397:  return 0;
 398:}
 399:
 400:int buyCard(int supplyPos, struct gameState *state) {
 401:  int who;
 402:  if (DEBUG){
 403:    printf("Entering buyCard...\n");
 404:  }
 405:
 406:  // I don't know what to do about the phase thing.
 407:
 408:  who = state->whoseTurn;
 409:
 410:  if (state->numBuys < 1){
 411:    if (DEBUG)
 412:      printf("You do not have any buys left\n");
 413:    return -1;
 414:  } else if (supplyCount(supplyPos, state) <1){
 415:    if (DEBUG)
 416:      printf("There are not any of that type of card left\n");
 417:    return -1;
 418:  } else if (state->coins < getCost(supplyPos)){
 419:    if (DEBUG)
 420:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
 421:    return -1;
 422:  } else {
 423:    state->phase=1;
 424:    //state->supplyCount[supplyPos]--;
 425:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
 426:
 427:    state->coins = (state->coins) - (getCost(supplyPos));
 428:    state->numBuys--;
 429:    if (DEBUG)
 430:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
 431:  }
 432:
 433:  //state->discard[who][state->discardCount[who]] = supplyPos;
 434:  //state->discardCount[who]++;
 435:
 436:  return 0;
 437:}
 438:
[91m 439:int numHandCards(struct gameState *state) {
[0m
[91m 440:  return state->handCount[ whoseTurn(state) ];
[0m
 441:}
 442:
 443:int handCard(int handPos, struct gameState *state) {
 444:  int currentPlayer = whoseTurn(state);
 445:  return state->hand[currentPlayer][handPos];
 446:}
 447:
 448:int supplyCount(int card, struct gameState *state) {
 449:  return state->supplyCount[card];
 450:}
 451:
 452:int fullDeckCount(int player, int card, struct gameState *state) {
 453:  int i;
 454:  int count = 0;
 455:
 456:  for (i = 0; i < state->deckCount[player]; i++)
 457:    {
 458:      if (state->deck[player][i] == card) count++;
 459:    }
 460:
 461:  for (i = 0; i < state->handCount[player]; i++)
 462:    {
 463:      if (state->hand[player][i] == card) count++;
 464:    }
 465:
 466:  for (i = 0; i < state->discardCount[player]; i++)
 467:    {
 468:      if (state->discard[player][i] == card) count++;
 469:    }
 470:
 471:  return count;
 472:}
 473:
[91m 474:int whoseTurn(struct gameState *state) {
[0m
[91m 475:  return state->whoseTurn;
[0m
 476:}
 477:
[92m 478:int endTurn(struct gameState *state) {
[0m
 479:  int k;
 480:  int i;
[92m 481:  int currentPlayer = whoseTurn(state);
[0m
 482:
 483:  //Discard hand
[92m 484:  for (i = 0; i < state->handCount[currentPlayer]; i++){
[0m
[92m 485:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
[0m
[92m 486:    state->hand[currentPlayer][i] = -1;//Set card to -1
[0m
 487:  }
[92m 488:  state->handCount[currentPlayer] = 0;//Reset hand count
[0m
 489:
 490:  //Code for determining the player
[92m 491:  if (currentPlayer < (state->numPlayers - 1)){
[0m
[92m 492:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
[0m
 493:  }
 494:  else{
 495:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
 496:  }
 497:
[92m 498:  state->outpostPlayed = 0;
[0m
[92m 499:  state->phase = 0;
[0m
[92m 500:  state->numActions = 1;
[0m
[92m 501:  state->coins = 0;
[0m
[92m 502:  state->numBuys = 1;
[0m
[92m 503:  state->playedCardCount = 0;
[0m
[92m 504:  state->handCount[state->whoseTurn] = 0;
[0m
 505:
 506:  //int k; move to top
 507:  //Next player draws hand
[92m 508:  for (k = 0; k < 5; k++){
[0m
[92m 509:    drawCard(state->whoseTurn, state);//Draw a card
[0m
 510:  }
 511:
 512:  //Update money
[92m 513:  updateCoins(state->whoseTurn, state , 0);
[0m
 514:
[92m 515:  return 0;
[0m
 516:}
 517:
 518:int isGameOver(struct gameState *state) {
 519:  int i;
 520:  int j;
 521:
 522:  //if stack of Province cards is empty, the game ends
 523:  if (state->supplyCount[province] == 0)
 524:    {
 525:      return 1;
 526:    }
 527:
 528:  //if three supply pile are at 0, the game ends
 529:  j = 0;
 530:  for (i = 0; i < 25; i++)
 531:    {
 532:      if (state->supplyCount[i] == 0)
 533:	{
 534:	  j++;
 535:	}
 536:    }
 537:  if ( j >= 3)
 538:    {
 539:      return 1;
 540:    }
 541:
 542:  return 0;
 543:}
 544:
 545:int scoreFor (int player, struct gameState *state) {
 546:
 547:  int i;
 548:  int score = 0;
 549:  //score from hand
 550:  for (i = 0; i < state->handCount[player]; i++)
 551:    {
 552:      if (state->hand[player][i] == curse) { score = score - 1; };
 553:      if (state->hand[player][i] == estate) { score = score + 1; };
 554:      if (state->hand[player][i] == duchy) { score = score + 3; };
 555:      if (state->hand[player][i] == province) { score = score + 6; };
 556:      if (state->hand[player][i] == great_hall) { score = score + 1; };
 557:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
 558:    }
 559:
 560:  //score from discard
 561:  for (i = 0; i < state->discardCount[player]; i++)
 562:    {
 563:      if (state->discard[player][i] == curse) { score = score - 1; };
 564:      if (state->discard[player][i] == estate) { score = score + 1; };
 565:      if (state->discard[player][i] == duchy) { score = score + 3; };
 566:      if (state->discard[player][i] == province) { score = score + 6; };
 567:      if (state->discard[player][i] == great_hall) { score = score + 1; };
 568:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
 569:    }
 570:
 571:  //score from deck
 572:  for (i = 0; i < state->discardCount[player]; i++)
 573:    {
 574:      if (state->deck[player][i] == curse) { score = score - 1; };
 575:      if (state->deck[player][i] == estate) { score = score + 1; };
 576:      if (state->deck[player][i] == duchy) { score = score + 3; };
 577:      if (state->deck[player][i] == province) { score = score + 6; };
 578:      if (state->deck[player][i] == great_hall) { score = score + 1; };
 579:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
 580:    }
 581:
 582:  return score;
 583:}
 584:
 585:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
 586:  int i;
 587:  int j;
 588:  int highScore;
 589:  int currentPlayer;
 590:
 591:  //get score for each player
 592:  for (i = 0; i < MAX_PLAYERS; i++)
 593:    {
 594:      //set unused player scores to -9999
 595:      if (i >= state->numPlayers)
 596:	{
 597:	  players[i] = -9999;
 598:	}
 599:      else
 600:	{
 601:	  players[i] = scoreFor (i, state);
 602:	}
 603:    }
 604:
 605:  //find highest score
 606:  j = 0;
 607:  for (i = 0; i < MAX_PLAYERS; i++)
 608:    {
 609:      if (players[i] > players[j])
 610:	{
 611:	  j = i;
 612:	}
 613:    }
 614:  highScore = players[j];
 615:
 616:  //add 1 to players who had less turns
 617:  currentPlayer = whoseTurn(state);
 618:  for (i = 0; i < MAX_PLAYERS; i++)
 619:    {
 620:      if ( players[i] == highScore && i > currentPlayer )
 621:	{
 622:	  players[i]++;
 623:	}
 624:    }
 625:
 626:  //find new highest score
 627:  j = 0;
 628:  for (i = 0; i < MAX_PLAYERS; i++)
 629:    {
 630:      if ( players[i] > players[j] )
 631:	{
 632:	  j = i;
 633:	}
 634:    }
 635:  highScore = players[j];
 636:
 637:  //set winners in array to 1 and rest to 0
 638:  for (i = 0; i < MAX_PLAYERS; i++)
 639:    {
 640:      if ( players[i] == highScore )
 641:	{
 642:	  players[i] = 1;
 643:	}
 644:      else
 645:	{
 646:	  players[i] = 0;
 647:	}
 648:    }
 649:
 650:  return 0;
 651:}
 652:
[91m 653:int drawCard(int player, struct gameState *state)
[0m
 654:{	int count;
 655:  int deckCounter;
[91m 656:if (state->deckCount[player] <= 0){//Deck is empty
[0m
 657:
 658:    //Step 1 Shuffle the discard pile back into a deck
 659:    int i;
 660:    //Move discard to deck
[91m 661:    for (i = 0; i < state->discardCount[player];i++){
[0m
 662:      state->deck[player][i] = state->discard[player][i];
 663:      state->discard[player][i] = -1;
 664:    }
 665:
[91m 666:    state->deckCount[player] = state->discardCount[player];
[0m
[91m 667:    state->discardCount[player] = 0;//Reset discard
[0m
 668:
 669:    //Shufffle the deck
[91m 670:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
[0m
 671:
 672:    if (DEBUG){//Debug statements
 673:      printf("Deck count now: %d\n", state->deckCount[player]);
 674:    }
 675:
[91m 676:    state->discardCount[player] = 0;
[0m
 677:
 678:    //Step 2 Draw Card
[91m 679:    count = state->handCount[player];//Get current player's hand count
[0m
 680:
 681:    if (DEBUG){//Debug statements
 682:      printf("Current hand count: %d\n", count);
 683:    }
 684:
[91m 685:    deckCounter = state->deckCount[player];//Create a holder for the deck count
[0m
 686:
[91m 687:    if (deckCounter == 0)
[0m
[91m 688:      return -1;
[0m
 689:
 690:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
 691:    state->deckCount[player]--;
 692:    state->handCount[player]++;//Increment hand count
 693:  }
 694:
 695:  else{
[91m 696:    int count = state->handCount[player];//Get current hand count for player
[0m
 697:    int deckCounter;
 698:    if (DEBUG){//Debug statements
 699:      printf("Current hand count: %d\n", count);
 700:    }
[91m 701:    deckCounter = state->deckCount[player];//Create holder for the deck count
[0m
[91m 702:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
[0m
[91m 703:    state->deckCount[player]--;
[0m
[91m 704:    state->handCount[player]++;//Increment hand count
[0m
 705:
 706:  }
 707:
[91m 708:  return 0;
[0m
 709:}
 710:
 711:int getCost(int cardNumber)
 712:{
 713:  switch( cardNumber )
 714:    {
 715:    case curse:
 716:      return 0;
 717:    case estate:
 718:      return 2;
 719:    case duchy:
 720:      return 5;
 721:    case province:
 722:      return 8;
 723:    case copper:
 724:      return 0;
 725:    case silver:
 726:      return 3;
 727:    case gold:
 728:      return 6;
 729:    case adventurer:
 730:      return 6;
 731:    case council_room:
 732:      return 5;
 733:    case feast:
 734:      return 4;
 735:    case gardens:
 736:      return 4;
 737:    case mine:
 738:      return 5;
 739:    case remodel:
 740:      return 4;
 741:    case smithy:
 742:      return 4;
 743:    case village:
 744:      return 3;
 745:    case baron:
 746:      return 4;
 747:    case great_hall:
 748:      return 3;
 749:    case minion:
 750:      return 5;
 751:    case steward:
 752:      return 3;
 753:    case tribute:
 754:      return 5;
 755:    case ambassador:
 756:      return 3;
 757:    case cutpurse:
 758:      return 4;
 759:    case embargo:
 760:      return 2;
 761:    case outpost:
 762:      return 5;
 763:    case salvager:
 764:      return 4;
 765:    case sea_hag:
 766:      return 4;
 767:    case treasure_map:
 768:      return 4;
 769:    }
 770:
 771:  return -1;
 772:}
 773:
 774:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
 775:{
 776:  int i;
 777:  int j;
 778:  int k;
 779:  int x;
 780:  int index;
 781:  int currentPlayer = whoseTurn(state);
 782:  int nextPlayer = currentPlayer + 1;
 783:
 784:  int tributeRevealedCards[2] = {-1, -1};
 785:  int temphand[MAX_HAND];// moved above the if statement
 786:  int drawntreasure=0;
 787:  int cardDrawn;
 788:  int z = 0;// this is the counter for the temp hand
 789:  if (nextPlayer > (state->numPlayers - 1)){
 790:    nextPlayer = 0;
 791:  }
 792:
 793:
 794:  //uses switch to select card and perform actions
 795:  switch( card )
 796:    {
 797:    case adventurer:
 798:	  adventurerF(state,currentPlayer,handPos,drawntreasure);
 799:      return 0;
 800:
 801:    case council_room:
 802:      //+4 Cards
 803:	  council_roomF(state,currentPlayer,handPos);
 804:      return 0;
 805:
 806:    case feast:
 807:      //gain card with cost up to 5
 808:      //Backup hand
 809:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
 810:	temphand[i] = state->hand[currentPlayer][i];//Backup card
 811:	state->hand[currentPlayer][i] = -1;//Set to nothing
 812:      }
 813:      //Backup hand
 814:
 815:      //Update Coins for Buy
 816:      updateCoins(currentPlayer, state, 5);
 817:      x = 1;//Condition to loop on
 818:      while( x == 1) {//Buy one card
 819:	if (supplyCount(choice1, state) <= 0){
 820:	  if (DEBUG)
 821:	    printf("None of that card left, sorry!\n");
 822:
 823:	  if (DEBUG){
 824:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
 825:	  }
 826:	}
 827:	else if (state->coins < getCost(choice1)){
 828:	  printf("That card is too expensive!\n");
 829:
 830:	  if (DEBUG){
 831:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
 832:	  }
 833:	}
 834:	else{
 835:
 836:	  if (DEBUG){
 837:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
 838:	  }
 839:
 840:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
 841:	  x = 0;//No more buying cards
 842:
 843:	  if (DEBUG){
 844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
 845:	  }
 846:
 847:	}
 848:      }
 849:
 850:      //Reset Hand
 851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
 852:	state->hand[currentPlayer][i] = temphand[i];
 853:	temphand[i] = -1;
 854:      }
 855:      //Reset Hand
 856:
 857:      return 0;
 858:
 859:    case gardens:
 860:      return -1;
 861:
 862:    case mine:
 863:      j = state->hand[currentPlayer][choice1];  //store card we will trash
 864:
 865:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
 866:	{
 867:	  return -1;
 868:	}
 869:
 870:      if (choice2 > treasure_map || choice2 < curse)
 871:	{
 872:	  return -1;
 873:	}
 874:
 875:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
 876:	{
 877:	  return -1;
 878:	}
 879:
 880:      gainCard(choice2, state, 2, currentPlayer);
 881:
 882:      //discard card from hand
 883:      discardCard(handPos, currentPlayer, state, 0);
 884:
 885:      //discard trashed card
 886:      for (i = 0; i < state->handCount[currentPlayer]; i++)
 887:	{
 888:	  if (state->hand[currentPlayer][i] == j)
 889:	    {
 890:	      discardCard(i, currentPlayer, state, 0);
 891:	      break;
 892:	    }
 893:	}
 894:
 895:      return 0;
 896:
 897:    case remodel:
 898:		return remodelF(choice2, choice1, handPos, currentPlayer, state);
 899:
 900:    case smithy:
 901:      //+3 Cards
 902:      for (i = 0; i < 3; i++)
 903:	{
 904:	  drawCard(currentPlayer, state);
 905:	}
 906:
 907:      //discard card from hand
 908:      discardCard(handPos, currentPlayer, state, 0);
 909:      return 0;
 910:
 911:    case village:
 912:      //+1 Card
 913:      drawCard(currentPlayer, state);
 914:
 915:      //+2 Actions
 916:      state->numActions = state->numActions + 2;
 917:
 918:      //discard played card from hand
 919:      discardCard(handPos, currentPlayer, state, 0);
 920:      return 0;
 921:
 922:    case baron:
 923:      state->numBuys++;//Increase buys by 1!
 924:      if (choice1 > 0){//Boolean true or going to discard an estate
 925:	int p = 0;//Iterator for hand!
 926:	int card_not_discarded = 1;//Flag for discard set!
 927:	while(card_not_discarded){
 928:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
 929:	    state->coins += 4;//Add 4 coins to the amount of coins
 930:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
 931:	    state->discardCount[currentPlayer]++;
 932:	    for (;p < state->handCount[currentPlayer]; p++){
 933:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
 934:	    }
 935:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
 936:	    state->handCount[currentPlayer]--;
 937:	    card_not_discarded = 0;//Exit the loop
 938:	  }
 939:	  else if (p > state->handCount[currentPlayer]){
 940:	    if(DEBUG) {
 941:	      printf("No estate cards in your hand, invalid choice\n");
 942:	      printf("Must gain an estate if there are any\n");
 943:	    }
 944:	    if (supplyCount(estate, state) > 0){
 945:	      gainCard(estate, state, 0, currentPlayer);
 946:	      state->supplyCount[estate]--;//Decrement estates
 947:	      if (supplyCount(estate, state) == 0){
 948:		isGameOver(state);
 949:	      }
 950:	    }
 951:	    card_not_discarded = 0;//Exit the loop
 952:	  }
 953:
 954:	  else{
 955:	    p++;//Next card
 956:	  }
 957:	}
 958:      }
 959:
 960:      else{
 961:	if (supplyCount(estate, state) > 0){
 962:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
 963:	  state->supplyCount[estate]--;//Decrement Estates
 964:	  if (supplyCount(estate, state) == 0){
 965:	    isGameOver(state);
 966:	  }
 967:	}
 968:      }
 969:
 970:
 971:      return 0;
 972:
 973:    case great_hall:
 974:      //+1 Card
 975:      drawCard(currentPlayer, state);
 976:
 977:      //+1 Actions
 978:      state->numActions++;
 979:
 980:      //discard card from hand
 981:      discardCard(handPos, currentPlayer, state, 0);
 982:      return 0;
 983:
 984:    case minion:
 985:      //+1 action
 986:      state->numActions++;
 987:
 988:      //discard card from hand
 989:      discardCard(handPos, currentPlayer, state, 0);
 990:
 991:      if (choice1)		//+2 coins
 992:	{
 993:	  state->coins = state->coins + 2;
 994:	}
 995:
 996:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
 997:	{
 998:	  //discard hand
 999:	  while(numHandCards(state) > 0)
1000:	    {
1001:	      discardCard(handPos, currentPlayer, state, 0);
1002:	    }
1003:
1004:	  //draw 4
1005:	  for (i = 0; i < 4; i++)
1006:	    {
1007:	      drawCard(currentPlayer, state);
1008:	    }
1009:
1010:	  //other players discard hand and redraw if hand size > 4
1011:	  for (i = 0; i < state->numPlayers; i++)
1012:	    {
1013:	      if (i != currentPlayer)
1014:		{
1015:		  if ( state->handCount[i] > 4 )
1016:		    {
1017:		      //discard hand
1018:		      while( state->handCount[i] > 0 )
1019:			{
1020:			  discardCard(handPos, i, state, 0);
1021:			}
1022:
1023:		      //draw 4
1024:		      for (j = 0; j < 4; j++)
1025:			{
1026:			  drawCard(i, state);
1027:			}
1028:		    }
1029:		}
1030:	    }
1031:
1032:	}
1033:      return 0;
1034:
1035:    case steward:
1036:      if (choice1 == 1)
1037:	{
1038:	  //+2 cards
1039:	  drawCard(currentPlayer, state);
1040:	  drawCard(currentPlayer, state);
1041:	}
1042:      else if (choice1 == 2)
1043:	{
1044:	  //+2 coins
1045:	  state->coins = state->coins + 2;
1046:	}
1047:      else
1048:	{
1049:	  //trash 2 cards in hand
1050:	  discardCard(choice2, currentPlayer, state, 1);
1051:	  discardCard(choice3, currentPlayer, state, 1);
1052:	}
1053:
1054:      //discard card from hand
1055:      discardCard(handPos, currentPlayer, state, 0);
1056:      return 0;
1057:
1058:    case tribute:
1059:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
1060:	if (state->deckCount[nextPlayer] > 0){
1061:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1062:	  state->deckCount[nextPlayer]--;
1063:	}
1064:	else if (state->discardCount[nextPlayer] > 0){
1065:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
1066:	  state->discardCount[nextPlayer]--;
1067:	}
1068:	else{
1069:	  //No Card to Reveal
1070:	  if (DEBUG){
1071:	    printf("No cards to reveal\n");
1072:	  }
1073:	}
1074:      }
1075:
1076:      else{
1077:	if (state->deckCount[nextPlayer] == 0){
1078:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
1079:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
1080:	    state->deckCount[nextPlayer]++;
1081:	    state->discard[nextPlayer][i] = -1;
1082:	    state->discardCount[nextPlayer]--;
1083:	  }
1084:
1085:	  shuffle(nextPlayer,state);//Shuffle the deck
1086:	}
1087:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
1089:	state->deckCount[nextPlayer]--;
1090:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
1092:	state->deckCount[nextPlayer]--;
1093:      }
1094:
1095:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
1096:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
1097:	state->playedCardCount++;
1098:	tributeRevealedCards[1] = -1;
1099:      }
1100:
1101:      for (i = 0; i <= 2; i ++){
1102:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
1103:	  state->coins += 2;
1104:	}
1105:
1106:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
1107:	  drawCard(currentPlayer, state);
1108:	  drawCard(currentPlayer, state);
1109:	}
1110:	else{//Action Card
1111:	  state->numActions = state->numActions + 2;
1112:	}
1113:      }
1114:
1115:      return 0;
1116:
1117:    case ambassador:
1118:      j = 0;		//used to check if player has enough cards to discard
1119:
1120:      if (choice2 > 2 || choice2 < 0)
1121:	{
1122:	  return -1;
1123:	}
1124:
1125:      if (choice1 == handPos)
1126:	{
1127:	  return -1;
1128:	}
1129:
1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
1131:	{
1132:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
1133:	    {
1134:	      j++;
1135:	    }
1136:	}
1137:      if (j < choice2)
1138:	{
1139:	  return -1;
1140:	}
1141:
1142:      if (DEBUG)
1143:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
1144:
1145:      //increase supply count for choosen card by amount being discarded
1146:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
1147:
1148:      //each other player gains a copy of revealed card
1149:      for (i = 0; i < state->numPlayers; i++)
1150:	{
1151:	  if (i != currentPlayer)
1152:	    {
1153:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
1154:	    }
1155:	}
1156:
1157:      //discard played card from hand
1158:      discardCard(handPos, currentPlayer, state, 0);
1159:
1160:      //trash copies of cards returned to supply
1161:      for (j = 0; j < choice2; j++)
1162:	{
1163:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
1164:	    {
1165:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
1166:		{
1167:		  discardCard(i, currentPlayer, state, 1);
1168:		  break;
1169:		}
1170:	    }
1171:	}
1172:
1173:      return 0;
1174:
1175:    case cutpurse:
1176:	  cutpurseF(currentPlayer, handPos, state);
1177:      return 0;
1178:
1179:
1180:    case embargo:
1181:      //+2 Coins
1182:      state->coins = state->coins + 2;
1183:
1184:      //see if selected pile is in play
1185:      if ( state->supplyCount[choice1] == -1 )
1186:	{
1187:	  return -1;
1188:	}
1189:
1190:      //add embargo token to selected supply pile
1191:      state->embargoTokens[choice1]++;
1192:
1193:      //trash card
1194:      discardCard(handPos, currentPlayer, state, 1);
1195:      return 0;
1196:
1197:    case outpost:
1198:		outpostF(state,handPos,currentPlayer);
1199:      return 0;
1200:
1201:    case salvager:
1202:      //+1 buy
1203:      state->numBuys++;
1204:
1205:      if (choice1)
1206:	{
1207:	  //gain coins equal to trashed card
1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
1209:	  //trash card
1210:	  discardCard(choice1, currentPlayer, state, 1);
1211:	}
1212:
1213:      //discard card
1214:      discardCard(handPos, currentPlayer, state, 0);
1215:      return 0;
1216:
1217:    case sea_hag:
1218:	  sea_hagF(state,currentPlayer);
1219:      return 0;
1220:
1221:    case treasure_map:
1222:      //search hand for another treasure_map
1223:      index = -1;
1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
1225:	{
1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
1227:	    {
1228:	      index = i;
1229:	      break;
1230:	    }
1231:	}
1232:      if (index > -1)
1233:	{
1234:	  //trash both treasure cards
1235:	  discardCard(handPos, currentPlayer, state, 1);
1236:	  discardCard(index, currentPlayer, state, 1);
1237:
1238:	  //gain 4 Gold cards
1239:	  for (i = 0; i < 4; i++)
1240:	    {
1241:	      gainCard(gold, state, 1, currentPlayer);
1242:	    }
1243:
1244:	  //return success
1245:	  return 1;
1246:	}
1247:
1248:      //no second treasure_map found in hand
1249:      return -1;
1250:    }
1251:
1252:  return -1;
1253:}
1254:
[91m1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
[0m
1256:{
[91m1257:	handPos = 1;
[0m
1258:  //if card is not trashed, added to Played pile
[91m1259:  if (trashFlag < 1)
[0m
1260:    {
1261:      //add card to played pile
[91m1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
[0m
[91m1263:      state->playedCardCount++;
[0m
1264:    }
1265:
1266:  //set played card to -1
[91m1267:  state->hand[currentPlayer][handPos] = -1;
[0m
1268:
1269:  //remove card from player's hand
[91m1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
[0m
1271:    {
1272:      //reduce number of cards in hand
1273:      state->handCount[currentPlayer]--;
1274:    }
[91m1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
[0m
1276:    {
1277:      //reduce number of cards in hand
1278:      state->handCount[currentPlayer]--;
1279:    }
1280:  else
1281:    {
1282:      //replace discarded card with last card in hand
[91m1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
[0m
1284:      //set last card to -1
[91m1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
[0m
1286:      //reduce number of cards in hand
[91m1287:      state->handCount[currentPlayer]--;
[0m
1288:    }
1289:
[91m1290:  return 0;
[0m
1291:}
1292:
1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
1294:{
1295:  //Note: supplyPos is enum of choosen card
1296:
1297:  //check if supply pile is empty (0) or card is not used in game (-1)
1298:  if ( supplyCount(supplyPos, state) < 1 )
1299:    {
1300:      return -1;
1301:    }
1302:
1303:  //added card for [whoseTurn] current player:
1304:  // toFlag = 0 : add to discard
1305:  // toFlag = 1 : add to deck
1306:  // toFlag = 2 : add to hand
1307:
1308:  if (toFlag == 1)
1309:    {
1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
1311:      state->deckCount[player]++;
1312:    }
1313:  else if (toFlag == 2)
1314:    {
1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
1316:      state->handCount[player]++;
1317:    }
1318:  else
1319:    {
1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
1321:      state->discardCount[player]++;
1322:    }
1323:
1324:  //decrease number in supply pile
1325:  state->supplyCount[supplyPos]--;
1326:
1327:  return 0;
1328:}
1329:
[91m1330:int updateCoins(int player, struct gameState *state, int bonus)
[0m
1331:{
1332:  int i;
1333:
1334:  //reset coin count
[91m1335:  state->coins = 0;
[0m
1336:
1337:  //add coins for each Treasure card in player's hand
[91m1338:  for (i = 0; i < state->handCount[player]; i++)
[0m
1339:    {
[91m1340:      if (state->hand[player][i] == copper)
[0m
1341:	{
[91m1342:	  state->coins += 1;
[0m
1343:	}
[91m1344:      else if (state->hand[player][i] == silver)
[0m
1345:	{
1346:	  state->coins += 2;
1347:	}
[91m1348:      else if (state->hand[player][i] == gold)
[0m
1349:	{
1350:	  state->coins += 3;
1351:	}
1352:    }
1353:
1354:  //add bonus
[91m1355:  state->coins += bonus;
[0m
1356:
[91m1357:  return 0;
[0m
1358:}
1359:
1360:
1361:
1362://end of dominion.c
1363:
